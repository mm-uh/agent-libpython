# coding: utf-8

"""
    Agent Platform

    This is a specification for openapi using  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: agentPlatform@grs.uh.cu
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from lib_agent.configuration import Configuration


class Agent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'function': 'str',
        'endpoint_service': 'list[Addr]',
        'is_alive_service': 'dict(str, Addr)',
        'documentation': 'dict(str, Addr)',
        'test_cases': 'list[TestCase]'
    }

    attribute_map = {
        'name': 'Name',
        'function': 'Function',
        'endpoint_service': 'EndpointService',
        'is_alive_service': 'IsAliveService',
        'documentation': 'Documentation',
        'test_cases': 'TestCases'
    }

    def __init__(self, name=None, function=None, endpoint_service=None, is_alive_service=None, documentation=None, test_cases=None, local_vars_configuration=None):  # noqa: E501
        """Agent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._function = None
        self._endpoint_service = None
        self._is_alive_service = None
        self._documentation = None
        self._test_cases = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if function is not None:
            self.function = function
        if endpoint_service is not None:
            self.endpoint_service = endpoint_service
        if is_alive_service is not None:
            self.is_alive_service = is_alive_service
        if documentation is not None:
            self.documentation = documentation
        if test_cases is not None:
            self.test_cases = test_cases

    @property
    def name(self):
        """Gets the name of this Agent.  # noqa: E501


        :return: The name of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Agent.


        :param name: The name of this Agent.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def function(self):
        """Gets the function of this Agent.  # noqa: E501


        :return: The function of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this Agent.


        :param function: The function of this Agent.  # noqa: E501
        :type: str
        """

        self._function = function

    @property
    def endpoint_service(self):
        """Gets the endpoint_service of this Agent.  # noqa: E501


        :return: The endpoint_service of this Agent.  # noqa: E501
        :rtype: list[Addr]
        """
        return self._endpoint_service

    @endpoint_service.setter
    def endpoint_service(self, endpoint_service):
        """Sets the endpoint_service of this Agent.


        :param endpoint_service: The endpoint_service of this Agent.  # noqa: E501
        :type: list[Addr]
        """

        self._endpoint_service = endpoint_service

    @property
    def is_alive_service(self):
        """Gets the is_alive_service of this Agent.  # noqa: E501


        :return: The is_alive_service of this Agent.  # noqa: E501
        :rtype: dict(str, Addr)
        """
        return self._is_alive_service

    @is_alive_service.setter
    def is_alive_service(self, is_alive_service):
        """Sets the is_alive_service of this Agent.


        :param is_alive_service: The is_alive_service of this Agent.  # noqa: E501
        :type: dict(str, Addr)
        """

        self._is_alive_service = is_alive_service

    @property
    def documentation(self):
        """Gets the documentation of this Agent.  # noqa: E501


        :return: The documentation of this Agent.  # noqa: E501
        :rtype: dict(str, Addr)
        """
        return self._documentation

    @documentation.setter
    def documentation(self, documentation):
        """Sets the documentation of this Agent.


        :param documentation: The documentation of this Agent.  # noqa: E501
        :type: dict(str, Addr)
        """

        self._documentation = documentation

    @property
    def test_cases(self):
        """Gets the test_cases of this Agent.  # noqa: E501


        :return: The test_cases of this Agent.  # noqa: E501
        :rtype: list[TestCase]
        """
        return self._test_cases

    @test_cases.setter
    def test_cases(self, test_cases):
        """Sets the test_cases of this Agent.


        :param test_cases: The test_cases of this Agent.  # noqa: E501
        :type: list[TestCase]
        """

        self._test_cases = test_cases

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Agent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Agent):
            return True

        return self.to_dict() != other.to_dict()
